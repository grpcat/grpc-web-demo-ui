// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "offer.proto" (package "offerpb", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message offerpb.PartnerInfo
 */
export interface PartnerInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: float rating = 3;
     */
    rating: number;
    /**
     * @generated from protobuf field: int64 orders = 4;
     */
    orders: bigint;
}
/**
 * @generated from protobuf message offerpb.GetOfferStreamRequest
 */
export interface GetOfferStreamRequest {
    /**
     * @generated from protobuf field: string flow_id = 1;
     */
    flowId: string;
    /**
     * @generated from protobuf field: string catalog_id = 2;
     */
    catalogId: string;
}
/**
 * @generated from protobuf message offerpb.GetOfferStreamResponse
 */
export interface GetOfferStreamResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: offerpb.PartnerInfo partner = 2;
     */
    partner?: PartnerInfo;
    /**
     * @generated from protobuf field: int64 amount = 3;
     */
    amount: bigint;
}
/**
 * @generated from protobuf message offerpb.GetOfferDetailsRequest
 */
export interface GetOfferDetailsRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message offerpb.GetOfferDetailsResponse
 */
export interface GetOfferDetailsResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string catalog_id = 2;
     */
    catalogId: string;
    /**
     * @generated from protobuf field: string partner_id = 3;
     */
    partnerId: string;
    /**
     * @generated from protobuf field: int64 amount = 4;
     */
    amount: bigint;
}
/**
 * @generated from protobuf message offerpb.UpdatePartnerTotalOrderRequest
 */
export interface UpdatePartnerTotalOrderRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message offerpb.UpdatePartnerTotalOrderResponse
 */
export interface UpdatePartnerTotalOrderResponse {
}
/**
 * @generated from protobuf message offerpb.UpdatePartnerRatingRequest
 */
export interface UpdatePartnerRatingRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: float rating = 2;
     */
    rating: number;
}
/**
 * @generated from protobuf message offerpb.UpdatePartnerRatingResponse
 */
export interface UpdatePartnerRatingResponse {
    /**
     * @generated from protobuf field: float rating = 1;
     */
    rating: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PartnerInfo$Type extends MessageType<PartnerInfo> {
    constructor() {
        super("offerpb.PartnerInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rating", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "orders", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PartnerInfo>): PartnerInfo {
        const message = { id: "", name: "", rating: 0, orders: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PartnerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartnerInfo): PartnerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* float rating */ 3:
                    message.rating = reader.float();
                    break;
                case /* int64 orders */ 4:
                    message.orders = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PartnerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* float rating = 3; */
        if (message.rating !== 0)
            writer.tag(3, WireType.Bit32).float(message.rating);
        /* int64 orders = 4; */
        if (message.orders !== 0n)
            writer.tag(4, WireType.Varint).int64(message.orders);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message offerpb.PartnerInfo
 */
export const PartnerInfo = new PartnerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOfferStreamRequest$Type extends MessageType<GetOfferStreamRequest> {
    constructor() {
        super("offerpb.GetOfferStreamRequest", [
            { no: 1, name: "flow_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "catalog_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetOfferStreamRequest>): GetOfferStreamRequest {
        const message = { flowId: "", catalogId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOfferStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOfferStreamRequest): GetOfferStreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string flow_id */ 1:
                    message.flowId = reader.string();
                    break;
                case /* string catalog_id */ 2:
                    message.catalogId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOfferStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string flow_id = 1; */
        if (message.flowId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.flowId);
        /* string catalog_id = 2; */
        if (message.catalogId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.catalogId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message offerpb.GetOfferStreamRequest
 */
export const GetOfferStreamRequest = new GetOfferStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOfferStreamResponse$Type extends MessageType<GetOfferStreamResponse> {
    constructor() {
        super("offerpb.GetOfferStreamResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "partner", kind: "message", T: () => PartnerInfo },
            { no: 3, name: "amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetOfferStreamResponse>): GetOfferStreamResponse {
        const message = { id: "", amount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOfferStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOfferStreamResponse): GetOfferStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* offerpb.PartnerInfo partner */ 2:
                    message.partner = PartnerInfo.internalBinaryRead(reader, reader.uint32(), options, message.partner);
                    break;
                case /* int64 amount */ 3:
                    message.amount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOfferStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* offerpb.PartnerInfo partner = 2; */
        if (message.partner)
            PartnerInfo.internalBinaryWrite(message.partner, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 amount = 3; */
        if (message.amount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message offerpb.GetOfferStreamResponse
 */
export const GetOfferStreamResponse = new GetOfferStreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOfferDetailsRequest$Type extends MessageType<GetOfferDetailsRequest> {
    constructor() {
        super("offerpb.GetOfferDetailsRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetOfferDetailsRequest>): GetOfferDetailsRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOfferDetailsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOfferDetailsRequest): GetOfferDetailsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOfferDetailsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message offerpb.GetOfferDetailsRequest
 */
export const GetOfferDetailsRequest = new GetOfferDetailsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOfferDetailsResponse$Type extends MessageType<GetOfferDetailsResponse> {
    constructor() {
        super("offerpb.GetOfferDetailsResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "catalog_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "partner_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetOfferDetailsResponse>): GetOfferDetailsResponse {
        const message = { id: "", catalogId: "", partnerId: "", amount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOfferDetailsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOfferDetailsResponse): GetOfferDetailsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string catalog_id */ 2:
                    message.catalogId = reader.string();
                    break;
                case /* string partner_id */ 3:
                    message.partnerId = reader.string();
                    break;
                case /* int64 amount */ 4:
                    message.amount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOfferDetailsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string catalog_id = 2; */
        if (message.catalogId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.catalogId);
        /* string partner_id = 3; */
        if (message.partnerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.partnerId);
        /* int64 amount = 4; */
        if (message.amount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message offerpb.GetOfferDetailsResponse
 */
export const GetOfferDetailsResponse = new GetOfferDetailsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePartnerTotalOrderRequest$Type extends MessageType<UpdatePartnerTotalOrderRequest> {
    constructor() {
        super("offerpb.UpdatePartnerTotalOrderRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePartnerTotalOrderRequest>): UpdatePartnerTotalOrderRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePartnerTotalOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePartnerTotalOrderRequest): UpdatePartnerTotalOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePartnerTotalOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message offerpb.UpdatePartnerTotalOrderRequest
 */
export const UpdatePartnerTotalOrderRequest = new UpdatePartnerTotalOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePartnerTotalOrderResponse$Type extends MessageType<UpdatePartnerTotalOrderResponse> {
    constructor() {
        super("offerpb.UpdatePartnerTotalOrderResponse", []);
    }
    create(value?: PartialMessage<UpdatePartnerTotalOrderResponse>): UpdatePartnerTotalOrderResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePartnerTotalOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePartnerTotalOrderResponse): UpdatePartnerTotalOrderResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdatePartnerTotalOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message offerpb.UpdatePartnerTotalOrderResponse
 */
export const UpdatePartnerTotalOrderResponse = new UpdatePartnerTotalOrderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePartnerRatingRequest$Type extends MessageType<UpdatePartnerRatingRequest> {
    constructor() {
        super("offerpb.UpdatePartnerRatingRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rating", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePartnerRatingRequest>): UpdatePartnerRatingRequest {
        const message = { id: "", rating: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePartnerRatingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePartnerRatingRequest): UpdatePartnerRatingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* float rating */ 2:
                    message.rating = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePartnerRatingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* float rating = 2; */
        if (message.rating !== 0)
            writer.tag(2, WireType.Bit32).float(message.rating);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message offerpb.UpdatePartnerRatingRequest
 */
export const UpdatePartnerRatingRequest = new UpdatePartnerRatingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePartnerRatingResponse$Type extends MessageType<UpdatePartnerRatingResponse> {
    constructor() {
        super("offerpb.UpdatePartnerRatingResponse", [
            { no: 1, name: "rating", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePartnerRatingResponse>): UpdatePartnerRatingResponse {
        const message = { rating: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePartnerRatingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePartnerRatingResponse): UpdatePartnerRatingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float rating */ 1:
                    message.rating = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePartnerRatingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float rating = 1; */
        if (message.rating !== 0)
            writer.tag(1, WireType.Bit32).float(message.rating);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message offerpb.UpdatePartnerRatingResponse
 */
export const UpdatePartnerRatingResponse = new UpdatePartnerRatingResponse$Type();
/**
 * @generated ServiceType for protobuf service offerpb.Offer
 */
export const Offer = new ServiceType("offerpb.Offer", [
    { name: "GetOfferStream", serverStreaming: true, options: {}, I: GetOfferStreamRequest, O: GetOfferStreamResponse },
    { name: "GetOfferDetails", options: {}, I: GetOfferDetailsRequest, O: GetOfferDetailsResponse },
    { name: "UpdatePartnerTotalOrder", options: {}, I: UpdatePartnerTotalOrderRequest, O: UpdatePartnerTotalOrderResponse },
    { name: "UpdatePartnerRating", options: {}, I: UpdatePartnerRatingRequest, O: UpdatePartnerRatingResponse }
]);
