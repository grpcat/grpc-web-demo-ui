// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "catalog.proto" (package "catalogpb", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message catalogpb.CatalogItem
 */
export interface CatalogItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string details = 3;
     */
    details: string;
    /**
     * @generated from protobuf field: string availability = 4;
     */
    availability: string;
    /**
     * @generated from protobuf field: int64 total_orders = 5;
     */
    totalOrders: bigint;
    /**
     * @generated from protobuf field: int64 average_cost = 6;
     */
    averageCost: bigint;
}
/**
 * @generated from protobuf message catalogpb.GetItemsRequest
 */
export interface GetItemsRequest {
}
/**
 * @generated from protobuf message catalogpb.GetItemsResponse
 */
export interface GetItemsResponse {
    /**
     * @generated from protobuf field: repeated catalogpb.CatalogItem item = 1;
     */
    item: CatalogItem[];
}
/**
 * @generated from protobuf message catalogpb.GetItemRequest
 */
export interface GetItemRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message catalogpb.GetItemResponse
 */
export interface GetItemResponse {
    /**
     * @generated from protobuf field: catalogpb.CatalogItem item = 1;
     */
    item?: CatalogItem;
}
/**
 * @generated from protobuf message catalogpb.UpdateItemRequest
 */
export interface UpdateItemRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int64 latest_cost = 2;
     */
    latestCost: bigint;
}
/**
 * @generated from protobuf message catalogpb.UpdateItemResponse
 */
export interface UpdateItemResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class CatalogItem$Type extends MessageType<CatalogItem> {
    constructor() {
        super("catalogpb.CatalogItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "details", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "availability", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "total_orders", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "average_cost", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CatalogItem>): CatalogItem {
        const message = { id: "", name: "", details: "", availability: "", totalOrders: 0n, averageCost: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CatalogItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CatalogItem): CatalogItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string details */ 3:
                    message.details = reader.string();
                    break;
                case /* string availability */ 4:
                    message.availability = reader.string();
                    break;
                case /* int64 total_orders */ 5:
                    message.totalOrders = reader.int64().toBigInt();
                    break;
                case /* int64 average_cost */ 6:
                    message.averageCost = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CatalogItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string details = 3; */
        if (message.details !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.details);
        /* string availability = 4; */
        if (message.availability !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.availability);
        /* int64 total_orders = 5; */
        if (message.totalOrders !== 0n)
            writer.tag(5, WireType.Varint).int64(message.totalOrders);
        /* int64 average_cost = 6; */
        if (message.averageCost !== 0n)
            writer.tag(6, WireType.Varint).int64(message.averageCost);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalogpb.CatalogItem
 */
export const CatalogItem = new CatalogItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetItemsRequest$Type extends MessageType<GetItemsRequest> {
    constructor() {
        super("catalogpb.GetItemsRequest", []);
    }
    create(value?: PartialMessage<GetItemsRequest>): GetItemsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetItemsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetItemsRequest): GetItemsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetItemsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalogpb.GetItemsRequest
 */
export const GetItemsRequest = new GetItemsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetItemsResponse$Type extends MessageType<GetItemsResponse> {
    constructor() {
        super("catalogpb.GetItemsResponse", [
            { no: 1, name: "item", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CatalogItem }
        ]);
    }
    create(value?: PartialMessage<GetItemsResponse>): GetItemsResponse {
        const message = { item: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetItemsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetItemsResponse): GetItemsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalogpb.CatalogItem item */ 1:
                    message.item.push(CatalogItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetItemsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalogpb.CatalogItem item = 1; */
        for (let i = 0; i < message.item.length; i++)
            CatalogItem.internalBinaryWrite(message.item[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalogpb.GetItemsResponse
 */
export const GetItemsResponse = new GetItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetItemRequest$Type extends MessageType<GetItemRequest> {
    constructor() {
        super("catalogpb.GetItemRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetItemRequest>): GetItemRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetItemRequest): GetItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalogpb.GetItemRequest
 */
export const GetItemRequest = new GetItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetItemResponse$Type extends MessageType<GetItemResponse> {
    constructor() {
        super("catalogpb.GetItemResponse", [
            { no: 1, name: "item", kind: "message", T: () => CatalogItem }
        ]);
    }
    create(value?: PartialMessage<GetItemResponse>): GetItemResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetItemResponse): GetItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* catalogpb.CatalogItem item */ 1:
                    message.item = CatalogItem.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* catalogpb.CatalogItem item = 1; */
        if (message.item)
            CatalogItem.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalogpb.GetItemResponse
 */
export const GetItemResponse = new GetItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItemRequest$Type extends MessageType<UpdateItemRequest> {
    constructor() {
        super("catalogpb.UpdateItemRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "latest_cost", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateItemRequest>): UpdateItemRequest {
        const message = { id: "", latestCost: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItemRequest): UpdateItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int64 latest_cost */ 2:
                    message.latestCost = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int64 latest_cost = 2; */
        if (message.latestCost !== 0n)
            writer.tag(2, WireType.Varint).int64(message.latestCost);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalogpb.UpdateItemRequest
 */
export const UpdateItemRequest = new UpdateItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItemResponse$Type extends MessageType<UpdateItemResponse> {
    constructor() {
        super("catalogpb.UpdateItemResponse", []);
    }
    create(value?: PartialMessage<UpdateItemResponse>): UpdateItemResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItemResponse): UpdateItemResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalogpb.UpdateItemResponse
 */
export const UpdateItemResponse = new UpdateItemResponse$Type();
/**
 * @generated ServiceType for protobuf service catalogpb.Catalog
 */
export const Catalog = new ServiceType("catalogpb.Catalog", [
    { name: "GetItem", options: {}, I: GetItemRequest, O: GetItemResponse },
    { name: "GetItems", options: {}, I: GetItemsRequest, O: GetItemsResponse },
    { name: "UpdateItem", options: {}, I: UpdateItemRequest, O: UpdateItemResponse }
]);
